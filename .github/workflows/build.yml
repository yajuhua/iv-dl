name: Build


on:
  workflow_dispatch:
    inputs:
      test:
        description: '-DskipTests'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      upload-artifact:
        description: 'upload-artifact'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      release:
        description: 'release'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      prerelease:
        description: 'prerelease'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      build-unix-like:
        description: 'build-unix-like'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      build-windows:
        description: 'build-windows'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      jdk-version:
        description: 'jdk-version'
        required: true
        default: '22'
        type: string
      graalvm-version:
        description: 'graalvm-version'
        required: true
        default: '23.0.2'
        type: string

jobs:
  # 新标签
  newTag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # 获取当前日期
      - name: Set release date
        id: set_release_date
        run: |
          DATE=$(date +'%Y.%m.%d')
          echo "RELEASE_DATE=${DATE}" >> $GITHUB_ENV
          echo "Release Date: ${DATE}"

      # 获取已有标签并生成新的标签
      - name: Set release tag
        id: set_release_tag
        run: |
          TAG_PREFIX=${{ env.RELEASE_DATE }}
          echo "Tag Prefix: ${TAG_PREFIX}"
          # 获取已有的标签
          TAGS=$(git tag --list "${TAG_PREFIX}*")
          echo "Existing Tags: ${TAGS}"
          if [ -z "$TAGS" ]; then
            NEW_TAG="${TAG_PREFIX}"
          else
            # 计算当天标签的最大后缀号并递增
            MAX_TAG=$(echo "$TAGS" | sed -E 's/.*\.([0-9]+)$/\1/' | sort -n | tail -1)
            if [ -z "$MAX_TAG" ]; then
              NEW_TAG="${TAG_PREFIX}.1"
            else
              NEW_SUFFIX=$((MAX_TAG + 1))
              NEW_TAG="${TAG_PREFIX}.${NEW_SUFFIX}"
            fi
          fi
          echo "New Tag: ${NEW_TAG}"
          echo "RELEASE_TAG=${NEW_TAG}" >> $GITHUB_ENV
          echo $NEW_TAG > newTag

      # 上传newTag变量
      - name: Upload newTag
        uses: actions/upload-artifact@v3
        with:
          name: newTag
          path: newTag


  # 打包jar包(打包所有依赖)
  build-jar-with-dependencies:
    name: build-jar-with-dependencies
    runs-on: ubuntu-latest
    needs: newTag
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK ${{ inputs.jdk-version }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ inputs.jdk-version }}
          distribution: 'temurin'
          cache: maven

      # 下载 newTag变量
      - name: Download native image conf
        uses: actions/download-artifact@v3
        with:
          name: newTag
          path: .

      # 获取标签
      - name: Get newTag var
        run: |
          cat newTag
          version=$(cat newTag)
          echo $version
          echo "version=$version" >> $GITHUB_ENV

      - name: Build with Maven
        run: |
          mvn -B -ntp package -Pjar-with-dependencies -DskipTests=$TEST -Dversion=$version
        env:
          TEST: ${{ inputs.test }}
          version: ${{ env.version }}

      - name: Upload jar artifact
        uses: actions/upload-artifact@v3
        with:
          name: jar
          path: target/*.jar

  # 生成Native image 所需的配置文件
  generate-native-image-conf:
    name: generate-native-image-conf
    runs-on: ubuntu-latest
    needs: build-jar-with-dependencies
    steps:
      # 克隆仓库
      - uses: actions/checkout@v2
      # 安装 GraalVM
      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: ${{ inputs.jdk-version }} # 目标 Java 版本
          distribution: 'graalvm-community' # 使用 CE 社区版
          version: ${{ inputs.graalvm-version }} # 版本
          github-token: ${{ secrets.GITHUB_TOKEN }} # Token

      # 下载jar-with-dependencies
      - name: Download jar-with-dependencies
        uses: actions/download-artifact@v3
        with:
          name: jar
          path: .

      #获取项目名称
      - name: Get Maven Project Name
        id: get_name
        run: |
          NAME=$(mvn help:evaluate -Dexpression=project.name -q -DforceStdout)
          echo $NAME
          echo "project_name=$NAME" >> $GITHUB_ENV

      # 安装 yt-dlp
      - name: Install yt-dlp
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install yt-dlp
          yt-dlp --version 

      # 输出配置文件
      - name: generate conf
        run: |
          java -agentlib:native-image-agent=config-merge-dir=META-INF/native-image \
          -Dfile.encoding=UTF-8 \
          -Dstdout.encoding=UTF-8 \
          -Dstderr.encoding=UTF-8 \
          -Dconsole.encoding=UTF-8 \
          -jar $PROJECT_NAME.jar --test
        env:
          PROJECT_NAME: ${{ env.project_name }}

      - name: Upload generate conf file # 上传配置文件
        uses: actions/upload-artifact@v3
        with:
          name: conf
          path: META-INF/native-image   # 上传 META-INF/native-image 目录

  # Linux/MacOS
  build-unix-like:
    name: ${{ matrix.version }} ${{ matrix.arch }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: generate-native-image-conf
    if: ${{ inputs.build-unix-like == 'true' }}  # 在这里设置条件
    strategy:
      matrix:
        version: [ latest ]
        # 在 macos 和 ubuntu 上进行编译
        os: [ macos-latest, ubuntu-latest ]
        arch: [amd64, arm64]
    steps:
      # 克隆仓库
      - uses: actions/checkout@v2

      # 安装 GraalVM
      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: ${{ inputs.jdk-version }} # 目标 Java 版本
          distribution: 'graalvm-community' # 使用 CE 社区版
          version: ${{ inputs.graalvm-version }} # GraalVM 版本
          github-token: ${{ secrets.GITHUB_TOKEN }} # Token

      # 下载 Native Image 编译配置文件
      - name: Download native image conf
        uses: actions/download-artifact@v3
        with:
          name: conf
          path: src/main/resources/META-INF/native-image/

      # 缓存 Maven 本地仓库，加快依赖解析速度
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # 下载 newTag变量
      - name: Download native image conf
        uses: actions/download-artifact@v3
        with:
          name: newTag
          path: .

      # 获取标签
      - name: Get newTag var
        run: |
          version=$(cat newTag)
          echo "version=$version" >> $GITHUB_ENV

      # 使用 Maven 进行构建，并指定输出到目标路径
      - name: Build with Maven
        run: |
          mvn -B -ntp package -Pnative-unix-like -DskipTests=$TEST -Dversion=$version
          mkdir $OS-iv-dl-$ARCH
          cp -rf target/iv-dl $OS-iv-dl-$ARCH/
          zip -r $OS-iv-dl-$ARCH.zip $OS-iv-dl-$ARCH/
        env:
          NO_DOCKER: ${{ runner.os != 'Linux' }}
          TEST: ${{ inputs.test }}
          OS: ${{ runner.os }}
          ARCH: ${{ matrix.arch }}
          version: ${{ env.version }}

      # 上传编译产物到 Actions
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: "${{ runner.os }}-iv-dl-${{ matrix.arch }}"
          path: ${{ runner.os }}-iv-dl-${{ matrix.arch }}.zip

  # Windows 配置文件，与 Linux 的大差不离
  build-windows:
    name: ${{ matrix.version }} ${{ matrix.arch }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: generate-native-image-conf
    if: ${{ inputs.build-windows == 'true' }}  # 在这里设置条件
    strategy:
      matrix:
        version: [ latest ]
        # 使用 Windows 构建
        os: [ windows-latest ]
        arch: [amd64]
    steps:
      - uses: actions/checkout@v2
      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: ${{ inputs.jdk-version }}
          distribution: 'graalvm-community'
          version: ${{ inputs.graalvm-version }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # 下载Native image 编译配置文件
      - name: Download native image conf
        uses: actions/download-artifact@v3
        with:
          name: conf
          path: src/main/resources/META-INF/native-image/

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # 下载 newTag变量
      - name: Download native image conf
        uses: actions/download-artifact@v3
        with:
          name: newTag
          path: .

      # 获取标签
      # 获取标签
      - name: Get newTag var
        run: |
          version=$(cat newTag)
          echo "version=$version" >> $GITHUB_ENV
        shell: bash

      - name: Build with Maven
        run: |
            mvn -B -ntp package -Pnative-windows -DskipTests=$TEST -Dversion=$version
            powershell Compress-Archive -Path target/iv-dl.exe -DestinationPath $OS-iv-dl-$ARCH.zip
        env:
          NO_DOCKER: ${{ runner.os != 'Linux' }}
          TEST: ${{ inputs.test }}
          OS: ${{ runner.os }}
          ARCH: ${{ matrix.arch }}
          version: ${{ env.version }}
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: "${{ runner.os }}-iv-dl-${{ matrix.arch }}"
          path: |
            ${{ runner.os }}-iv-dl-${{ matrix.arch }}.zip


  # 释放出来
  release:
    needs: [build-unix-like,build-windows]
    runs-on: ubuntu-latest
    if: ${{ inputs.release == 'true' }}  # 在这里设置条件
    steps:
      # 下载 newTag变量
      - name: Download newTag
        uses: actions/download-artifact@v3
        with:
          name: newTag
          path: .

      # 获取标签
      - name: Get newTag var
        run: |
          tag=$(cat newTag)
          echo "RELEASE_TAG=${tag}" >> $GITHUB_ENV

      # 下载不同平台的构建工件
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: conf
          path: ./artifacts/conf

      # 将编译配置文件打包成zip
      - name: zip native image config file
        run: |
          zip -r native-image-conf.zip artifacts/conf/*

      # 上传文件并发布 Release
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{ env.RELEASE_TAG  }}"
          prerelease: ${{ inputs.prerelease }}
          title: "${{ env.RELEASE_TAG  }}"
          files: |
            artifacts/*/*.zip
            artifacts/jar/iv-dl.jar
            native-image-conf.zip
            
